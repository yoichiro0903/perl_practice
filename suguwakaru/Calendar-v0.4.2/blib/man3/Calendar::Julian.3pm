.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Calendar::Julian 3"
.TH Calendar::Julian 3 "2008-04-26" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Calendar::Julian \- Perl extension for Julian Calendar
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&   use Calendar;
\&   my $date = Calendar\->new_from_Julian(1, 1, 2006);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
From \*(L"\s-1FREQUENTLY ASKED QUESTIONS ABOUT CALENDARS\*(R"\s0(\f(CW\*(C`http://www.tondering.dk/claus/calendar.html\*(C'\fR)
.Sp
.RS 4
The Julian calendar was introduced by Julius Caesar in 45 \s-1BC.\s0 It was
in common use until the late 1500s, when countries started changing to
the Gregorian calendar (section 2.2). However, some countries (for
example, Greece and Russia) used it into the early 1900s, and the
Orthodox church in Russia still uses it, as do some other Orthodox
churches.
.Sp
In the Julian calendar, the tropical year is approximated as 365 1/4
days = 365.25 days. This gives an error of 1 day in approximately 128
years.
.Sp
The approximation 365 1/4 is achieved by having 1 leap year every 4
years.
.RE
.SH "METHOD"
.IX Header "METHOD"
.IP "is_leap_year" 4
.IX Item "is_leap_year"
True if the date in a leap year.
.IP "day_of_year" 4
.IX Item "day_of_year"
Return the day of year the day of the year, in the range 1..365 (or
1..366 in leap years.)
.IP "last_day_of_month" 4
.IX Item "last_day_of_month"
Return the last day in the month. For example:
.Sp
.Vb 2
\&    $date = Calendar\->new_from_Julian(2, 1, 2006);
\&    print $date\->last_day_of_month;       # output 28
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Ye Wenbin <wenbinye@gmail.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2006 by ywb
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.7 or,
at your option, any later version of Perl 5 you may have available.
