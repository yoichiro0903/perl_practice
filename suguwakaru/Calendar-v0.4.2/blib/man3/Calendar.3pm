.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Calendar 3"
.TH Calendar 3 "2008-04-26" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Calendar \- Perl extension for calendar convertion
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&   use Calendar;
\&   my $date = Calendar\->new_from_Gregorian(12, 16, 2006);
\&   print $date\->date_string("Gregorian date: %M %W %d %Y"), "\en";
\&
\&   my $newdate = $date + 7;
\&   print $newdate\->date_string("Gregorian date of next week: %D"), "\en";
\&   
\&   $newdate = $date\-7;
\&   print $newdate\->date_string("Absolute date of last week: %A\en");
\&   
\&   my $diff = $date\-$newdate;
\&   printf "There is %d days between %s and %s\en",
\&       $diff, $date\->date_string("%D"), $newdate\->date_string("%D");
\&   
\&   $date\->convert_to_Julian;
\&   print $date\->date_string("Julian date: %M %W %d %Y"), "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Calendar is a class for calendar convertion or calculation. The
algorithm is from emacs calendar library. Most functions of this class
is simply rewrite from elisp to perl.
.SS "Constructor"
.IX Subsection "Constructor"
.IP "new" 4
.IX Item "new"
All class of Calendar should accept absolute date to construct the
object. Other type of argument may also be acceptable. For example:
.Sp
.Vb 4
\&    use Calendar::Gregorian;
\&    Calendar::Gregorian\->new(732662);
\&    Calendar::Gregorian\->new(12, 17, 2006);
\&    Calendar::Gregorian\->new(\-year=>2006, \-month=>12, \-day=>17);
.Ve
.IP "new_from_Package" 4
.IX Item "new_from_Package"
Calendar has \s-1AUTOLOAD\s0 function that can automatic call new function
from package. So the following construct are also valid:
.Sp
.Vb 4
\&    use Calendar;
\&    Calendar\->new_from_Gregorian(732662);
\&    Calendar\->new_from_Gregorian(12, 17, 2006);
\&    Calendar\->new_from_Gregorian(\-year=>2006, \-month=>12, \-day=>17);
.Ve
.SS "Convertion"
.IX Subsection "Convertion"
Calendar object can convert from each other. The function is name
`convert_to_Package'. For example:
.PP
.Vb 2
\&    $date = Calendar\->new_from_Gregorian(12, 17, 2006);
\&    $date\->convert_to_Julian;
.Ve
.PP
Now \f(CW$date\fR is a Julian calendar date. If you want maintain \f(CW$date\fR not
change, use Calendar\->new_from_Julian($date\->absolute_date) instead.
.SS "Operator"
.IX Subsection "Operator"
Calendar overload several operator.
.IP "+" 4
A Calendar object can add a number of days. For example:
.Sp
.Vb 1
\&    $newdate = $date + 1;
.Ve
.Sp
The \f(CW$newdate\fR is next day of \f(CW$date\fR. You \s-1CANNOT\s0 add a date to another
date.
.IP "\-" 4
If a date substract from a number of days, that means the date before
the number of days. For example:
.Sp
.Vb 1
\&    $newdate = $date \- 1;
.Ve
.Sp
The \f(CW$newdate\fR is the last day of \f(CW$date\fR. When a date substract from
another date, returns the days between the two date. For example:
.Sp
.Vb 2
\&    $newdate = $date + 7;
\&    $days = $newdate \- $date;        # $days is 7
.Ve
.Sp
The return value is different type, you should always be careful.
.IP "<=>" 4
Two date can compare from each other. For example:
.Sp
.Vb 6
\&    if ( $date2 > $date1 ) {
\&        print "$date2 is after $date1.\en";
\&    }
\&    else {
\&        print "$date1 is after $date2.\en";
\&    }
.Ve
.ie n .IP """""" 4
.el .IP "``''" 4
That means you can simply print the date without explicitly call a
method. For detail, read \*(L"Format date\*(R" section.
.SS "Format date"
.IX Subsection "Format date"
Every calendar class has a format template: \f(CW$default_format\fR. You can
set the template. The format function is `date_string'. The format
specifications as following:
.PP
.Vb 8
\&   %%       PERCENT
\&   %A       Absoute date
\&   %d       numeric day of the month, with leading zeros (eg 01..31)
\&   %D       MM/DD/YY
\&   %m       month number, with leading zeros (eg 01..31)
\&   %M       month name
\&   %W       day of the week
\&   %Y       year
.Ve
.PP
For chinese calendar, the following specifications are available:
.PP
.Vb 5
\&   %S       sexagesimal name, eg. "丙戌"
\&   %D       day name, eg. "初二"
\&   %Z       zodiac name, eg. "狗"
\&   %M       month name in chinese, eg. "十一月"
\&   %W       week day name in chinese, eg. "星期一"
.Ve
.PP
Meanwhile, \f(CW%Y\fR, \f(CW%m\fR and \f(CW%d\fR now stand for Gregorian year, month and day.
.SS "Other method"
.IX Subsection "Other method"
.IP "absoute_date" 4
.IX Item "absoute_date"
The number of days elapsed between the Gregorian date 12/31/1 \s-1BC.\s0
The Gregorian date Sunday, December 31, 1 \s-1BC\s0 is imaginary.
.IP "astro_date" 4
.IX Item "astro_date"
Astronomers use a simple counting of days elapsed since noon, Monday,
January 1, 4713 B.C. on the Julian calendar.  The number of days elapsed
is called the \*(L"Julian day number\*(R" or the \*(L"Astronomical day number\*(R".
.IP "new_from_Astro" 4
.IX Item "new_from_Astro"
There is no package Calendar::Astro. use new_from_Astro and astro_date
to convert between other type of calendar and astro calendar.
.IP "today" 4
.IX Item "today"
The current date of local time.
.IP "weekday" 4
.IX Item "weekday"
The weekday number. 0 for sunday and 1 for monday.
.IP "weekday_name" 4
.IX Item "weekday_name"
The full name of the weekday.
.IP "month" 4
.IX Item "month"
The number of month, range from 1 to 12.
.IP "month_name" 4
.IX Item "month_name"
The full name of month.
.IP "day" 4
.IX Item "day"
The number of day in the month. The first day in the month is 1.
.IP "year" 4
.IX Item "year"
The year number.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ye Wenbin <wenbinye@gmail.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2006 by ywb
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.7 or,
at your option, any later version of Perl 5 you may have available.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 289:" 4
.IX Item "Around line 289:"
Non-ASCII character seen before =encoding in '\*(L"丙戌\*(R"'. Assuming \s-1UTF\-8\s0
